# because apple:
if [[ `uname` == "Darwin" ]]; then
    alias gdb='sudo gdb'
fi


# Python Virtualenvs
venv_utils () {
    # We use 'venv.nosync' to make icloud ignore it, then the symlink is used to
    # 'remove' the '.' from the name so that pylint from Atom can see it
    virtualenv -p python$1 venv.nosync
    source ./venv.nosync/bin/activate

    # pip install flake8
    # pip install pep8-naming
    # pip install --upgrade pep8-naming
    pip install pylint
    pip install ansible-lint
    pip install jedi

    ln -s venv.nosync venv
}

mkvenv () {
    # We use 'venv.nosync' to make icloud ignore it, then the symlink is used to
    # 'remove' the '.' from the name so that pylint from Atom can see it
    virtualenv -p python$1 venv.nosync
    source ./venv.nosync/bin/activate

    ln -s venv.nosync venv
}

activenv () {
    source ./venv.nosync/bin/activate
}

conda_utils () {
    # We use venv.nosync to make icloud ignore it, then the symlink is used to
    # 'remove' the '.' from the name so that pylint from Atom can see it
    conda create -n venv.nosync python=$1 anaconda
    source activate venv.nosync

    # conda install -n venv.nosync flake8
    conda install -n venv.nosync pylint
    conda install -n venv.nosync jedi

    ln -s  /Users/daniellombardi/anaconda3/envs/venv.nosync venv
}

python_log_utils() {
    cat ~/dotfiles/TEMPLATES/PYTHON/constants.py
}


pip_freeze() {
    pipreqs --use-local # https://github.com/bndr/pipreqs
    # pip uninstall pylint -y > /dev/null 2>&1
    # pip freeze > requirements.txt
    # pip install pylint > /dev/null 2>&1
}


# Templating
create_from_template () {

    source_dir=${HOME}/dotfiles/TEMPLATES/${1}

    copied_files=()
    for file_path in "$source_dir/"(.[^.]*|*); do
        file="$(basename $file_path)"

        if [[ ! -f "./${file}" ]]; then
            cp -r ${HOME}/dotfiles/TEMPLATES/${1}/${file} .
            copied_files+=("${file}")
        else
            echo "Unable to include batteries for: \"${file}\""
        fi

    done

    new_line=0
    for file_name in "${copied_files[@]}"; do
        echo -n "${file_name}\t"
        new_line=1
    done

    if [ "${new_line}" -eq 1 ]; then
        echo ""
    fi

}

alias pip="pip3"
alias python="python3"

alias pipu="pip install --upgrade pip"

alias pylog="python_log_utils"
alias golog="cat ~/dotfiles/TEMPLATES/GO/logger.go"

alias condadel="conda remove -n venv.nosync -all"

alias pipfrz=pip_freeze

# helpers
alias longlinepy='echo "  # noqa: E501 # pylint: disable=C0301"'

# school work templates
alias mkcpp="create_from_template 'CPP'"
alias mkcpproj="create_from_template 'CPP_PROJECT'"
alias mkc="create_from_template 'C'"
alias mkso="create_from_template 'OS'"
alias mkos="create_from_template 'OS'"
alias mkembrs="cargo generate esp-rs/esp-idf-template cargo"


# docker and SO
alias here=start_OS_dev_env
alias ghidra=ghidraRun
alias k=kubectl
alias clock="cloc --exclude-dir="venv.nosync" ."

alias dockermu="colima start --cpu 6 --memory 4 --arch x86_64 --vz-rosetta"


alias kindm="kind create cluster --config ~/.kube/kind.yml"

alias protocr="echo 'protoc --go_out=servers --go_opt=paths=source_relative --go-grpc_out=servers --go-grpc_opt=paths=source_relative server.proto'"
alias protocserver="protoc --go_out=servers --go_opt=paths=source_relative --go-grpc_out=servers --go-grpc_opt=paths=source_relative server.proto"
# alias protocclient="protoc --go_out=clients --go_opt=paths=source_relative --go-grpc_out=clients --go-grpc_opt=paths=source_relative server.proto"

protocclient() {
    protoc --go_out=$1 --go_opt=paths=source_relative --go-grpc_out=$1 --go-grpc_opt=paths=source_relative $1.proto
}

protocclientpy() {
    python -m pip install grpcio-tools
    protoc --python_out=. $1.proto
    python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. $1.proto
}

exportenv() {
    export $(grep -v '^#' .env | xargs)
}

getdlv() {
    go get github.com/go-delve/delve/cmd/dlv
}

colimax86() {
    colima start --arch aarch64 --vm-type=vz --vz-rosetta --cpu 4 --memory 8
#    colima start default --arch x86_64 --cpu 4 --memory 4 --disk 100 --vm-type=vz --vz-rosetta
}

genpass() {
    if [ $# -eq 0 ]; then
        echo "Run 'genpass <PASS_LEN>'"
        return 1
    fi

    LENGHT=$1
    PASSWORD=$(head -c $LENGHT /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | cut -c 1-$LENGHT)

    echo $PASSWORD
}

syncsrv() {
    trap "exit" INT

    if [ $# -ne 3 ]; then
        echo "Run 'syncsrv <REMOTE_HOST> <REMOTE_USER> <REMOTE_DIR>'"
        return 1
    fi

    LOCAL_DIR="."
    REMOTE_HOST=$1
    REMOTE_USER=$2
    REMOTE_DIR=$3

    while true; do
        rsync -rtuvc --relative $REMOTE_DIR --delete $LOCAL_DIR $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR
        VAL=$?
        if [ "$VAL" != "0" ] && [ "$VAL" != "23" ]; then
            return $VAL
        fi
        sleep 0.1
    done
}

multiarch() {
    echo "podman build --platform linux/amd64,linux/arm64 ."
}

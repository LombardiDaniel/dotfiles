# because apple:
if [[ `uname` == "Darwin" ]]; then
    alias gdb='sudo gdb'
fi


# Python Virtualenvs
venv_utils () {
    # We use 'venv.nosync' to make icloud ignore it, then the symlink is used to
    # 'remove' the '.' from the name so that pylint from Atom can see it
    virtualenv -p python$1 venv.nosync
    source ./venv.nosync/bin/activate

    # pip install flake8
    # pip install pep8-naming
    # pip install --upgrade pep8-naming
    pip install pylint
    pip install ansible-lint
    pip install jedi

    ln -s venv.nosync venv
}

mk_venv () {
    # We use 'venv.nosync' to make icloud ignore it, then the symlink is used to
    # 'remove' the '.' from the name so that pylint from Atom can see it
    virtualenv -p python$1 venv.nosync
    source ./venv.nosync/bin/activate

    ln -s venv.nosync venv
}

conda_utils () {
    # We use venv.nosync to make icloud ignore it, then the symlink is used to
    # 'remove' the '.' from the name so that pylint from Atom can see it
    conda create -n venv.nosync python=$1 anaconda
    source activate venv.nosync

    # conda install -n venv.nosync flake8
    conda install -n venv.nosync pylint
    conda install -n venv.nosync jedi

    ln -s  /Users/daniellombardi/anaconda3/envs/venv.nosync venv
}

python_log_utils() {
    cat ./TEMPLATES/PYTHON/constants.py
}


pip_freeze() {
    pipreqs --use-local # https://github.com/bndr/pipreqs
    # pip uninstall pylint -y > /dev/null 2>&1
    # pip freeze > requirements.txt
    # pip install pylint > /dev/null 2>&1
}


# Templating
create_from_template () {

    source_dir=${HOME}/dotfiles/TEMPLATES/${1}

    copied_files=()
    for file_path in "$source_dir/"(.[^.]*|*); do
        file="$(basename $file_path)"

        if [[ ! -f "./${file}" ]]; then
            cp -r ${HOME}/dotfiles/TEMPLATES/${1}/${file} .
            copied_files+=("${file}")
        else
            echo "Unable to include batteries for: \"${file}\""
        fi

    done

    new_line=0
    for file_name in "${copied_files[@]}"; do
        echo -n "${file_name}\t"
        new_line=1
    done

    if [ "${new_line}" -eq 1 ]; then
        echo ""
    fi

}

start_OS_dev_env_NO_COLIMA () {

    docker ps > /dev/null 2>&1
    if [ $? -eq 1 ]; then
        echo "Launching Docker..."
        open -a docker

        docker ps > /dev/null 2>&1
        while [ $? -eq 1 ]
        do
            sleep 1
            docker ps > /dev/null 2>&1
        done
    fi

    docker run --rm -it -v $(pwd):/usr/src gcc:latest # "cd /usr/src && ls"
}

start_OS_dev_env () {

    docker ps > /dev/null 2>&1
    if [ $? -eq 1 ]; then
        colima start
    fi

    # docker run --rm -it -v $(pwd):/usr/src/project -w="/usr/src/project" gcc:latest "/bin/sh"

    docker run --rm -it -v "`pwd`:/usr/src/project" gcc:latest /bin/sh -c "cd /usr/src/project && ls && /bin/bash"

    RED='\033[0;31m'
    NC='\033[0m' # No Color

    echo $RED
    echo "Don't forget to run 'colima stop' if you're done using containers."
    echo $NC
    # colima stop
}

# python venvs
alias mkconda="conda_utils '3.7'"
alias mkconda3.7="conda_utils '3.7'"
alias mkconda3.8="conda_utils '3.8'"
alias mkconda3.9="conda_utils '3.9'"

alias mkvenv0=mk_venv
alias mkvenv3.7="venv_utils '3.7'"
alias mkvenv3.8="venv_utils '3.8'"
alias mkvenv3.9="venv_utils '3.9'"
alias mkvenv3.10="venv_utils '3.10'"
alias mkvenv3.11="venv_utils '3.11'"
alias mkvenv3.12="venv_utils '3.12'"
alias mkvenv=venv_utils

alias pip="pip3"
alias python="python3"

alias pipu="pip install --upgrade pip"

alias pylog="python_log_utils"

alias activenv='source ./venv/bin/activate'
alias activenv3.11='source venv.nosync/usr/local/bin/activate'
alias acticonda='source ~/anaconda3/envs/venv.nosync/bin/activate'

alias condadel='conda remove -n venv.nosync -all'

alias pipfrz=pip_freeze

# helpers
alias longline='echo "  # noqa: E501 # pylint: disable=C0301"'

# school work templates
alias mkcpp="create_from_template 'CPP'"
alias mkcpproj="create_from_template 'CPP_PROJECT'"
alias mkc="create_from_template 'C'"
alias mkso="create_from_template 'OS'"
alias mkos="create_from_template 'OS'"


# docker and SO
alias here=start_OS_dev_env
alias ghidra=ghidraRun
alias k=kubectl
alias clock="cloc --exclude-dir="venv.nosync" ."

alias dockermu=colima start --profile rosetta --cpu 4 --memory 4 --disk 100 --arch aarch64 --vm-type=vz --vz-rosetta
# And then use it with docker context use colima-rosetta, and then proceed to docker run --platform=linux/amd64 ...
# https://github.com/abiosoft/colima/issues/805

# SSH connections (local)
alias rpi="ssh 10.1.10.46"
alias macsrv="ssh mac-server.local"

alias kindm="kind create cluster --config ~/.kube/kind.yml"
